import type { NextPage } from 'next';
import Head from 'next/head';
import { useState } from 'react';
import styles from '../styles/Home.module.css';
import CountdownTimer from '../../components/CountdownTimer';

const Home: NextPage = () => {

  const [pomodoro, setPomodoro] = useState(true);
  const [short, setShort] = useState(false);
  const [long, setLong] = useState(false);
  const [start, setStart] = useState(false);
  const [add, setAdd] = useState(false);
  const [newTaskName, setNewTaskName] = useState('');
  const [newTemporaryTaskName, setNewTemporaryTaskName] = useState('');
  const [newTaskDescription, setNewTaskDescription] = useState('');
  const [newTemporaryTaskDescription, setNewTemporaryTaskDescription] = useState('');
  const [pomodoroTime, setPomodoroTime] = useState(new Date().getTime() + (25 * 60 * 1000));
  const [pomodoroStopedTime, setPomodoroStopedTime] = useState(25);
  const [tasks, setTasks] = useState([
    {
      'nome': 'Tarefa 1',
      'descricao': 'Descrição da tarefa',
      'finalizada': false,
      'selecionada': false
    }
  ]);

  const setActiveButton = (name: string) => {
    if (name == 'pomodoro') {
      setPomodoro(true);
      setShort(false);
      setLong(false);
      setPomodoroTime(new Date().getTime() + (25 * 60 * 1000));
      setPomodoroStopedTime(25);
      setStart(false);
    } else if (name == 'short') {
      setPomodoro(false);
      setShort(true);
      setLong(false);
      setPomodoroTime(new Date().getTime() + (5 * 60 * 1000));
      setPomodoroStopedTime(5);
      setStart(false);
    } else {
      setPomodoro(false);
      setShort(false);
      setLong(true);
      setPomodoroTime(new Date().getTime() + (15 * 60 * 1000));
      setPomodoroStopedTime(15);
      setStart(false);
    }
  };

  console.log("renderizou");

  const manageTask = (index: number) => {
    const auxTasks = [...tasks];
    auxTasks.forEach((auxTask, auxIndex) => {
      if (auxIndex != index) {
        auxTask.selecionada = false;
      }
    });
    auxTasks[index].selecionada = !auxTasks[index].selecionada;
    setTasks(auxTasks);
  };

  const addTask = () => {
    if (newTaskName.length == 0) {
      alert('O nome da tarefa não pode estar vazio');
      return;
    } else if (newTaskDescription.length == 0) {
      alert('A descrição da tarefa não pode estar vazia');
      return;
    } else {
      const taskExists = tasks.find((task) => task.nome == newTaskName);
      if (taskExists != undefined) {
        alert('Este nome já se encontra em uso');
        return;
      }
    }

    const auxTasks = [...tasks];
    auxTasks.push({
      'nome': newTaskName,
      'descricao': newTaskDescription,
      'finalizada': false,
      'selecionada': false
    });
    setTasks(auxTasks);
    setNewTaskName('');
    setNewTaskDescription('');
    setAdd(false);
  };

  const deleteTask = (index: number) => {
    const auxTasks = [...tasks];
    auxTasks.splice(index, 1);
    setTasks(auxTasks);
  };

  const deleteAllTasks = () => {
    setTasks([]);
  };

  const updateTask = (index: number) => {
    const auxTasks = [...tasks];
    if (newTemporaryTaskName.length != 0)
      auxTasks[index].nome = newTemporaryTaskName;
    if (newTemporaryTaskDescription.length != 0)
      auxTasks[index].descricao = newTemporaryTaskDescription;
    setTasks(auxTasks);
    setNewTemporaryTaskName('');
    setNewTemporaryTaskDescription('');
    manageTask(index);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Pomodoro App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header className={styles.header}>
        Logo e Nome
      </header>

      <main className={styles.main}>
        <div className={styles.counter}>
          <div className={styles.buttonContainer}>
            <button onClick={() => setActiveButton('pomodoro')} className={pomodoro ? styles.counterButtonActive : styles.counterButton}>
              Pomodoro
            </button>
            <button onClick={() => setActiveButton('short')} className={short ? styles.counterButtonActive : styles.counterButton}>
              Short Break
            </button>
            <button onClick={() => setActiveButton('long')} className={long ? styles.counterButtonActive : styles.counterButton}>
              Long Break
            </button>
          </div>
          <div className={styles.number}>
            <CountdownTimer start={start} pomodoroStopedTime={pomodoroStopedTime} targetDate={pomodoroTime} />
          </div>
          <button onClick={() => setStart(!start)} className={styles.start}>
            {start ? 'Parar' : 'Começar'}
          </button>
        </div>

        <div className={styles.tasks}>
          <p className={styles.title}>Tarefa Atual</p>
          <span className={styles.title}>{tasks[0]?.nome}</span>

          <div className={styles.headerTasks}>
            <span className={styles.headerTasksTitle}>Tarefas</span>
            <button onClick={() => deleteAllTasks()} className={styles.trashButton}><img className={styles.trashImage} src="deleteWhite.png" alt="Ícone de lixo" /></button>
          </div>
          {
            tasks && tasks.map((task, index) => {
              return <div key={task.nome} className={styles.task}>
                <div className={styles.taskCollapsed}>
                  <div onClick={() => manageTask(index)} className={styles.taskInfo}>
                    <img src="check.png" alt="Ícone de concluído" />
                    <span className={styles.taskName}>{task.nome}</span>
                    <span className={styles.taskDescription}>{task.descricao}</span>
                  </div>
                  <button onClick={() => deleteTask(index)} className={styles.trashButton}><img className={styles.trashImage} src="delete.png" alt="Ícone de lixo" /></button>
                </div>
                {
                  task.selecionada ? <>
                    <div className={styles.taskExpanded}>
                      <label htmlFor="nome">Nome da tarefa</label>
                      <input onChange={(e) => setNewTemporaryTaskName(e.target.value)} value={newTemporaryTaskName.length > 0 ? newTemporaryTaskName : task.nome} name='nome' type="text" />
                      <label htmlFor="descricao">Descrição da tarefa</label>
                      <textarea onChange={(e) => setNewTemporaryTaskDescription(e.target.value)} value={newTemporaryTaskDescription.length > 0 ? newTemporaryTaskDescription : task.descricao} name="descricao" id="" rows={5}></textarea>
                    </div>
                    <div className={styles.containerButtons}>
                      <button onClick={() => manageTask(index)} className={styles.cancelButton}>Cancelar</button>
                      <button onClick={() => updateTask(index)} className={styles.confirmButton}>Confirmar</button>
                    </div>
                  </> : <></>
                }
              </div>;
            })
          }

          {
            add ? <div className={styles.task}>
              <div className={styles.taskExpanded}>
                <label htmlFor="nome">Nome da tarefa</label>
                <input value={newTaskName} onChange={(e) => setNewTaskName(e.target.value)} name='nome' type="text" />
                <label htmlFor="descricao">Descrição da tarefa</label>
                <textarea value={newTaskDescription} onChange={(e) => setNewTaskDescription(e.target.value)} name="descricao" id="" rows={5}></textarea>
              </div>
              <div className={styles.containerButtons}>
                <button onClick={() => setAdd(false)} className={styles.cancelButton}>Cancelar</button>
                <button onClick={() => addTask()} className={styles.confirmButton}>Confirmar</button>
              </div>
            </div> : <></>
          }

          <div onClick={() => setAdd(true)} className={styles.addTask}>
            <img src="add.png" alt="Ícone de adicionar" />
            <span className={styles.addTaskDescription}>Adicionar tarefa</span>
          </div>

          <div className={styles.spentTime}>
            <span className={styles.spentTimeText}>Total despendido: <b>{`00:00:00`}</b></span>
          </div>
        </div>
      </main>

      <footer className={styles.footer}>
        Powered by Jonas Moreira, Lademir Junior e Luisa Ferreira
      </footer>
    </div>
  );
};

export default Home;
